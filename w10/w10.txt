QuickSort using HoarePartition

Implement the following algorithm for using Quick Sort to sort an array of elemnts.

//Sorts a subarray by quicksort
//Input: Subarray of array A[0..n − 1], of integers defined by its left and right
// indices l and r
//Output: Subarray A[l..r] sorted in nondecreasing order
Quicksort(A[l..r])
   if l < r
      s ← HoarePartition(A[l..r]) //s is a split position
      Quicksort(A[l..s − 1])
      Quicksort(A[s + 1..r])
      printSubArray

//Partitions a subarray by Hoare’s algorithm, using the first element
// as a pivot
//Input: Subarray of array A[0..n − 1], defined by its left and right
// indices l and r (l<r)
//Output: Partition of A[l..r], with the split position returned as
// this function’s value
HoarePartition(A[l..r])
   p←A[l]
   i ←l;
   j ←r + 1
   repeat
      repeat i ←i + 1 until A[i]≥ p
      repeat j ←j − 1 until A[j ]≤ p
      swap(A[i], A[j ])
   until i ≥ j
   swap(A[i], A[j ]) //undo last swap when i ≥ j
   swap(A[l], A[j ])
   return j

Print out the subarray at each step. Enclose the active portion in []. For example:
.QuickSort 3 4 5 2 3 4
[2 3]  3 5 4 4
2 3 3 [4 4]  5
2 3 3 [4 4 5]
[2 3 3 4 4 5]
[2 3 3 4 4 5]
